package project.speech.asrengines;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;

import org.apache.commons.io.FilenameUtils;

import edu.cmu.sphinx.api.Configuration;
import edu.cmu.sphinx.api.SpeechResult;
import edu.cmu.sphinx.api.StreamSpeechRecognizer;
import org.apache.commons.io.*;

public class CmuSphinxEngine {

	private String languageModel;
	private String dictionaryModel;
	private String acousticModel;

	public CmuSphinxEngine() {
		System.out.println("cmu object instantiated...");
		languageModel = "resource/models/language/en-us.lm.dmp";
		dictionaryModel = "resource/models/dictionary/cmudict.0.6d";
		acousticModel = "resource/acoustic/WSJ_8gau_13dCep_16k_40mel_130Hz_6800Hz.jar";
	}

	public Configuration configure() {
		System.out.println("Configuring cmusphinx models...");
		Configuration configuration = new Configuration();
		configuration.setAcousticModelPath(acousticModel);
		configuration.setDictionaryPath(dictionaryModel);
		configuration.setLanguageModelPath(languageModel);
		return configuration;
	}

	public void recognizeSpeech(Configuration config, File databaseName,
			File speeches, File referenceFile) throws IOException {

		StreamSpeechRecognizer recognizer = new StreamSpeechRecognizer(config);
		
		File createFolder = new File(databaseName.getName());
		createFolder.mkdirs();
		
		File promptOriginal = new File(createFolder, "prompt-original.txt");
		FileUtils.copyFile(referenceFile, promptOriginal);
		
		File createFile = new File(createFolder, "speechOutput.txt");
		PrintWriter outFile = new PrintWriter(createFile, "UTF-8");

		System.out.println("Start of recognition...\n");

		ArrayList<String> filePath = new ArrayList<String>();
		ArrayList<String> fileNameExtension = new ArrayList<String>();
		for (File eachSpeech : speeches.listFiles()) {
			filePath.add(eachSpeech.getAbsolutePath());
			fileNameExtension.add(eachSpeech.getName());
		}

		Collections.sort(filePath);
		Collections.sort(fileNameExtension);

		for (int idx = 0; idx < filePath.size(); idx++) {
			recognizer.startRecognition(new FileInputStream(filePath.get(idx)));
			SpeechResult result = recognizer.getResult();
			recognizer.stopRecognition();
			String sentenceDetected = result.getHypothesis();
			String fileName = FilenameUtils.removeExtension(fileNameExtension
					.get(idx));
			outFile.print(fileName + " ");
			outFile.println(sentenceDetected);
		}
		outFile.close();
		System.out.println("End of recognition...\n");
		System.out.println("Exit...");
	}
}